<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\Lightweight.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\Lightweight.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Thu Sep 05 19:50:32 2024
<BR><P>
<H3>Maximum Stack Usage =        816 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; Asterisk::forwardStrategy() &rArr; Forward::setResOUTVector(OutPair, Vec2b) &rArr; Forward::setVec2Out(unsigned char, Vec2b) &rArr; Vec2b::operator +(const Vec2b&) &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[82]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[d]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">NMI_Handler</a><BR>
 <LI><a href="#[e]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">HardFault_Handler</a><BR>
 <LI><a href="#[f]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">MemManage_Handler</a><BR>
 <LI><a href="#[10]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">BusFault_Handler</a><BR>
 <LI><a href="#[11]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">UsageFault_Handler</a><BR>
 <LI><a href="#[12]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">SVC_Handler</a><BR>
 <LI><a href="#[13]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">DebugMon_Handler</a><BR>
 <LI><a href="#[14]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">PendSV_Handler</a><BR>
 <LI><a href="#[28]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[28]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[28]">ADC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[10]">BusFault_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2a]">CAN1_RX0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2b]">CAN1_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2c]">CAN1_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[29]">CAN1_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[56]">CAN2_RX0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[57]">CAN2_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[58]">CAN2_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[55]">CAN2_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[64]">DCMI_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[21]">DMA1_Stream0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[22]">DMA1_Stream1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[23]">DMA1_Stream2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[24]">DMA1_Stream3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[25]">DMA1_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[26]">DMA1_Stream5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[27]">DMA1_Stream6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[45]">DMA1_Stream7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4e]">DMA2_Stream0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4f]">DMA2_Stream1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[50]">DMA2_Stream2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[51]">DMA2_Stream3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[52]">DMA2_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5a]">DMA2_Stream5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5b]">DMA2_Stream6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5c]">DMA2_Stream7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[13]">DebugMon_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[53]">ETH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[54]">ETH_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1c]">EXTI0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3e]">EXTI15_10_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1d]">EXTI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1e]">EXTI2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1f]">EXTI3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[20]">EXTI4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2d]">EXTI9_5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1a]">FLASH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[46]">FMC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[66]">FPU_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[65]">HASH_RNG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[e]">HardFault_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[36]">I2C1_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[35]">I2C1_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[38]">I2C2_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[37]">I2C2_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5f]">I2C3_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5e]">I2C3_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[f]">MemManage_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[d]">NMI_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[59]">OTG_FS_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[40]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[61]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[60]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[63]">OTG_HS_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[62]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[17]">PVD_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[14]">PendSV_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1b]">RCC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3f]">RTC_Alarm_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[19]">RTC_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[c]">Reset_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[47]">SDIO_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[39]">SPI1_IRQHandler</a> from spi_1.o(i.SPI1_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3a]">SPI2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[49]">SPI3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[12]">SVC_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[15]">SysTick_Handler</a> from time_service.o(i.SysTick_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[67]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[18]">TAMP_STAMP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2e]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[31]">TIM1_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[30]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2f]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[32]">TIM2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[33]">TIM3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[34]">TIM4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[48]">TIM5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4c]">TIM6_DAC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4d]">TIM7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[41]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[44]">TIM8_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[43]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[42]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4a]">UART4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4b]">UART5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3b]">USART1_IRQHandler</a> from usart1.o(i.USART1_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3c]">USART2_IRQHandler</a> from usart2.o(i.USART2_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3d]">USART3_IRQHandler</a> from usart3.o(i.USART3_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5d]">USART6_IRQHandler</a> from usart6.o(i.USART6_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[11]">UsageFault_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[16]">WWDG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[69]">Vec2bTime::Vec2bTime()</a> from queues_ball.o(i._ZN9Vec2bTimeC1Ev) referenced from queues_ball.o(i._ZN9BallVec2bC1Ev)
 <LI><a href="#[6b]">__main</a> from __main.o(!!!main) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[6a]">__sti___8_main_cpp_ab1d1ed5</a> from main.o(i.__sti___8_main_cpp_ab1d1ed5) referenced from main.o(.init_array)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[6b]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[6d]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[6f]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1b5]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1b6]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1b7]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[1b8]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[1b9]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[76]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[70]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[1ba]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[1bb]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[1bc]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[1bd]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[72]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[1be]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[1bf]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[1c0]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[1c1]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[1c2]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[1c3]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[1c4]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[1c5]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[1c6]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[1c7]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[1c8]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[1c9]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[1ca]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[1cb]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[1cc]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[1cd]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[7b]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[1ce]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[1cf]"></a>__rt_lib_shutdown_fini_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[1d0]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[1d1]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000011))

<P><STRONG><a name="[1d2]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000012))

<P><STRONG><a name="[1d3]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[1d4]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[1d5]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[6e]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[1d6]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[73]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[75]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[1d7]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[77]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 816 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; Asterisk::forwardStrategy() &rArr; Forward::setResOUTVector(OutPair, Vec2b) &rArr; Forward::setVec2Out(unsigned char, Vec2b) &rArr; Vec2b::operator +(const Vec2b&) &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[1d8]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[83]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[7a]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[1d9]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[7c]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[c]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1da]"></a>__semihosting$guard</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1db]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[b4]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button::Button(Pin, bool)
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Motor(Pin&, unsigned char, Pin&, unsigned char)
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSOP::TSOP(Pin&, Pin&, Pin&, Pin&, Pin&, Pin&)
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dma::Dma(unsigned, Adc&, DMA_Stream_TypeDef*, unsigned, unsigned, unsigned char)
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;omniplatform::omniplatform(Motor&, Motor&, Motor&, Motor&)
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_ab1d1ed5
</UL>

<P><STRONG><a name="[1dc]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1dd]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1de]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1df]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[9]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[8]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[6c]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[7e]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[80]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[7f]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[1e0]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[1e1]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[1e2]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[81]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1e3]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[74]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[79]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[c9]"></a>ADC_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc::startADC()
</UL>

<P><STRONG><a name="[c6]"></a>ADC_CommonInit</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_CommonInit))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc::adcInit(unsigned char)
</UL>

<P><STRONG><a name="[bf]"></a>ADC_DMACmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc::adcDmaInit()
</UL>

<P><STRONG><a name="[bd]"></a>ADC_DMARequestAfterLastTransferCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_DMARequestAfterLastTransferCmd))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc::adcDmaInit()
</UL>

<P><STRONG><a name="[be]"></a>ADC_EOCOnEachRegularChannelCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_EOCOnEachRegularChannelCmd))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc::adcDmaInit()
</UL>

<P><STRONG><a name="[c8]"></a>ADC_Init</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, stm32f4xx_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc::startADC()
</UL>

<P><STRONG><a name="[c2]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 184 bytes, Stack size 20 bytes, stm32f4xx_adc.o(i.ADC_RegularChannelConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc::setChannel()
</UL>

<P><STRONG><a name="[c0]"></a>ADC_SoftwareStartConv</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_SoftwareStartConv))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc::adcDmaInit()
</UL>

<P><STRONG><a name="[d2]"></a>DMA_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dma::dmaInit(DMA_Stream_TypeDef*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[cf]"></a>DMA_DeInit</STRONG> (Thumb, 324 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dma::dmaInit(DMA_Stream_TypeDef*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[d1]"></a>DMA_Init</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, stm32f4xx_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dma::dmaInit(DMA_Stream_TypeDef*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[f0]"></a>GPIO_Init</STRONG> (Thumb, 144 bytes, Stack size 20 bytes, stm32f4xx_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin::Pin(char, unsigned char, unsigned short)
</UL>

<P><STRONG><a name="[f1]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, stm32f4xx_gpio.o(i.GPIO_PinAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin::Pin(char, unsigned char, unsigned short)
</UL>

<P><STRONG><a name="[e9]"></a>GPIO_ReadInputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_ReadInputData))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin::readPin()
</UL>

<P><STRONG><a name="[dd]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin::set(bool)
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin::resetBit()
</UL>

<P><STRONG><a name="[dc]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin::set(bool)
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin::setBit()
</UL>

<P><STRONG><a name="[ce]"></a>RCC_AHB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_AHB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin::Pin(char, unsigned char, unsigned short)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dma::dmaInit(DMA_Stream_TypeDef*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[d5]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3::usart3Init(unsigned, float, unsigned char)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2::usart2Init(unsigned, float, unsigned char)
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin::RCC_ClockCmd()
</UL>

<P><STRONG><a name="[c4]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart6::usart6Init(unsigned, float, unsigned char)
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1::usart1Init(unsigned, float, unsigned char)
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin::RCC_ClockCmd()
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc::adcInit(unsigned char)
</UL>

<P><STRONG><a name="[88]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 214 bytes, Stack size 20 bytes, stm32f4xx_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_service::init()
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[39]"></a>SPI1_IRQHandler</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, spi_1.o(i.SPI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_I2S_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_IRQHandler
</UL>

<P><STRONG><a name="[15]"></a>SysTick_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, time_service.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>SystemInit</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, system_stm32f4xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(.text)
</UL>
<P><STRONG><a name="[e2]"></a>TIM_BDTRConfig</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_BDTRConfig))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin::pwmInit(short, unsigned, unsigned char)
</UL>

<P><STRONG><a name="[e1]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin::pwmInit(short, unsigned, unsigned char)
</UL>

<P><STRONG><a name="[e7]"></a>TIM_CtrlPWMOutputs</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_CtrlPWMOutputs))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin::pwmInit(short, unsigned, unsigned char)
</UL>

<P><STRONG><a name="[e3]"></a>TIM_OC1Init</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, stm32f4xx_tim.o(i.TIM_OC1Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin::pwmInit(short, unsigned, unsigned char)
</UL>

<P><STRONG><a name="[e4]"></a>TIM_OC2Init</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, stm32f4xx_tim.o(i.TIM_OC2Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC2Init
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin::pwmInit(short, unsigned, unsigned char)
</UL>

<P><STRONG><a name="[e5]"></a>TIM_OC3Init</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, stm32f4xx_tim.o(i.TIM_OC3Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC3Init
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin::pwmInit(short, unsigned, unsigned char)
</UL>

<P><STRONG><a name="[e6]"></a>TIM_OC4Init</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, stm32f4xx_tim.o(i.TIM_OC4Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC4Init
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin::pwmInit(short, unsigned, unsigned char)
</UL>

<P><STRONG><a name="[d7]"></a>TIM_SetCompare1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SetCompare1))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin::pwm(unsigned)
</UL>

<P><STRONG><a name="[d8]"></a>TIM_SetCompare2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SetCompare2))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin::pwm(unsigned)
</UL>

<P><STRONG><a name="[d9]"></a>TIM_SetCompare3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SetCompare3))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin::pwm(unsigned)
</UL>

<P><STRONG><a name="[da]"></a>TIM_SetCompare4</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SetCompare4))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin::pwm(unsigned)
</UL>

<P><STRONG><a name="[e0]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin::pwmInit(short, unsigned, unsigned char)
</UL>

<P><STRONG><a name="[3b]"></a>USART1_IRQHandler</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, usart1.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART1_IRQHandler &rArr; USART_ClearITPendingBit
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>USART2_IRQHandler</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, usart2.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART2_IRQHandler &rArr; USART_ClearITPendingBit
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>USART3_IRQHandler</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, usart3.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART3_IRQHandler &rArr; USART_ClearITPendingBit
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>USART6_IRQHandler</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, usart6.o(i.USART6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART6_IRQHandler &rArr; USART_ClearITPendingBit
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f4xx_usart.o(i.USART_ClearITPendingBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[10e]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart6::usart6Init(unsigned, float, unsigned char)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3::usart3Init(unsigned, float, unsigned char)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2::usart2Init(unsigned, float, unsigned char)
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1::usart1Init(unsigned, float, unsigned char)
</UL>

<P><STRONG><a name="[10d]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f4xx_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart6::usart6Init(unsigned, float, unsigned char)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3::usart3Init(unsigned, float, unsigned char)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2::usart2Init(unsigned, float, unsigned char)
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1::usart1Init(unsigned, float, unsigned char)
</UL>

<P><STRONG><a name="[87]"></a>USART_Init</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, stm32f4xx_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart6::usart6Init(unsigned, float, unsigned char)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3::usart3Init(unsigned, float, unsigned char)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2::usart2Init(unsigned, float, unsigned char)
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1::usart1Init(unsigned, float, unsigned char)
</UL>

<P><STRONG><a name="[10b]"></a>USART_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart6::usart6Init(unsigned, float, unsigned char)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3::usart3Init(unsigned, float, unsigned char)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2::usart2Init(unsigned, float, unsigned char)
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1::usart1Init(unsigned, float, unsigned char)
</UL>

<P><STRONG><a name="[89]"></a>BallSensor::ballInGrip()</STRONG> (Thumb, 230 bytes, Stack size 48 bytes, ballsensor.o(i._ZN10BallSensor10ballInGripEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = BallSensor::ballInGrip() &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_service::millis()
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BallSensor::getValue()
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::update()
</UL>

<P><STRONG><a name="[90]"></a>BallSensor::ballLongTimeInGrip()</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ballsensor.o(i._ZN10BallSensor18ballLongTimeInGripEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BallSensor::ballLongTimeInGrip()
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_service::millis()
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::goalkeeperStrategy()
</UL>

<P><STRONG><a name="[8a]"></a>BallSensor::getValue()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ballsensor.o(i._ZN10BallSensor8getValueEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BallSensor::getValue()
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dma::dataReturn(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BallSensor::ballInGrip()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::update()
</UL>

<P><STRONG><a name="[92]"></a>BallSensor::BallSensor(Dma&)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ballsensor.o(i._ZN10BallSensorC1ER3Dma))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BallSensor::BallSensor(Dma&)
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_service::millis()
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_ab1d1ed5
</UL>

<P><STRONG><a name="[1e4]"></a>BallSensor::BallSensor__sub_object(Dma&)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ballsensor.o(i._ZN10BallSensorC1ER3Dma), UNUSED)

<P><STRONG><a name="[156]"></a>Goalkeeper::setLeaveTime(short)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, goalkeeper.o(i._ZN10Goalkeeper12setLeaveTimeEs))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::init(unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[14d]"></a>Goalkeeper::dist2GoalLong()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, goalkeeper.o(i._ZN10Goalkeeper13dist2GoalLongEv))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::goalkeeperStrategy()
</UL>

<P><STRONG><a name="[93]"></a>Goalkeeper::angleStopLeaving(float)</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, goalkeeper.o(i._ZN10Goalkeeper16angleStopLeavingEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Goalkeeper::angleStopLeaving(float)
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_service::millis()
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::abs(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::goalkeeperStrategy()
</UL>

<P><STRONG><a name="[95]"></a>Goalkeeper::changeFromReturn()</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, goalkeeper.o(i._ZN10Goalkeeper16changeFromReturnEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Goalkeeper::changeFromReturn() &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::goalkeeperStrategy()
</UL>

<P><STRONG><a name="[98]"></a>Goalkeeper::getGoalkeeperPos()</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, goalkeeper.o(i._ZN10Goalkeeper16getGoalkeeperPosEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Goalkeeper::getGoalkeeperPos() &rArr; std::atan2(float, float) &rArr; __hardfp_atan2f &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::atan2(float, float)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goalkeeper::getVecToIntersection(short)
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goalkeeper::getCurrentLeaveTime(short)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goalkeeper::getVecToGoalCenter()
</UL>

<P><STRONG><a name="[9b]"></a>Goalkeeper::getTargetRadiuses()</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, goalkeeper.o(i._ZN10Goalkeeper17getTargetRadiusesEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Goalkeeper::getTargetRadiuses() &rArr; std::atan2(float, float) &rArr; __hardfp_atan2f &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessingCoord::adduct(short)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::atan2(float, float)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goalkeeper::getVecToGoalCenter()
</UL>

<P><STRONG><a name="[9e]"></a>Goalkeeper::getVecToGoalCenter()</STRONG> (Thumb, 424 bytes, Stack size 80 bytes, goalkeeper.o(i._ZN10Goalkeeper18getVecToGoalCenterEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Goalkeeper::getVecToGoalCenter() &rArr; Goalkeeper::getTargetRadiuses() &rArr; std::atan2(float, float) &rArr; __hardfp_atan2f &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::pow(float, int)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goalkeeper::getTargetRadiuses()
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goalkeeper::getGoalkeeperPos()
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vec2b::Vec2b()
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vec2b::Vec2b(double, double)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::goalkeeperStrategy()
</UL>

<P><STRONG><a name="[a3]"></a>Goalkeeper::getCurrentLeaveTime(short)</STRONG> (Thumb, 162 bytes, Stack size 48 bytes, goalkeeper.o(i._ZN10Goalkeeper19getCurrentLeaveTimeEs))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Goalkeeper::getCurrentLeaveTime(short) &rArr; Goalkeeper::getGoalkeeperPos() &rArr; std::atan2(float, float) &rArr; __hardfp_atan2f &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goalkeeper::getGoalkeeperPos()
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessingCoord::adduct180(short)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::atan2(float, float)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::goalkeeperStrategy()
</UL>

<P><STRONG><a name="[a5]"></a>Goalkeeper::getTargetGoalkeeper()</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, goalkeeper.o(i._ZN10Goalkeeper19getTargetGoalkeeperEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Goalkeeper::getTargetGoalkeeper() &rArr; std::atan2(float, float) &rArr; __hardfp_atan2f &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessingCoord::adduct180(short)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::atan2(float, float)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::goalkeeperStrategy()
</UL>

<P><STRONG><a name="[14e]"></a>Goalkeeper::setAngleLeaveStatus()</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, goalkeeper.o(i._ZN10Goalkeeper19setAngleLeaveStatusEv))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::goalkeeperStrategy()
</UL>

<P><STRONG><a name="[a6]"></a>Goalkeeper::getVecToIntersection(short)</STRONG> (Thumb, 1530 bytes, Stack size 120 bytes, goalkeeper.o(i._ZN10Goalkeeper20getVecToIntersectionEs))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Goalkeeper::getVecToIntersection(short) &rArr; ProcessingCoord::ballInBack(float, unsigned char) &rArr; std::atan2(float, float) &rArr; __hardfp_atan2f &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::pow(float, float)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goalkeeper::getGoalkeeperPos()
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vec2b::Vec2b()
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vec2b::Vec2b(double, double)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessingCoord::adduct(short)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessingCoord::ballInBack(float, unsigned char)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::atan2(float, float)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::abs(float)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::goalkeeperStrategy()
</UL>

<P><STRONG><a name="[aa]"></a>Goalkeeper::Goalkeeper()</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, goalkeeper.o(i._ZN10GoalkeeperC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Goalkeeper::Goalkeeper()
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessingCoord::ProcessingCoord()
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_ab1d1ed5
</UL>

<P><STRONG><a name="[1e5]"></a>Goalkeeper::Goalkeeper__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, goalkeeper.o(i._ZN10GoalkeeperC1Ev), UNUSED)

<P><STRONG><a name="[ae]"></a>omniplatform::adduct0_360(float)</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, omniplatform.o(i._ZN12omniplatform11adduct0_360Ef))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;omniplatform::move(float, float, float, float, float)
</UL>

<P><STRONG><a name="[ac]"></a>omniplatform::move(float, float, float, float, float)</STRONG> (Thumb, 516 bytes, Stack size 64 bytes, omniplatform.o(i._ZN12omniplatform4moveEfffff))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = omniplatform::move(float, float, float, float, float) &rArr; std::sin(float) &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::go(short)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::getMaxSpeed()
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;omniplatform::adduct0_360(float)
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::sin(float)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::goalkeeperStrategy()
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::forwardStrategy()
</UL>

<P><STRONG><a name="[b1]"></a>omniplatform::disable()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, omniplatform.o(i._ZN12omniplatform7disableEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = omniplatform::disable() &rArr; Motor::disable() &rArr; Pin::pwm(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::disable()
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::update()
</UL>

<P><STRONG><a name="[b3]"></a>omniplatform::omniplatform(Motor&, Motor&, Motor&, Motor&)</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, omniplatform.o(i._ZN12omniplatformC1ER5MotorS1_S1_S1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = omniplatform::omniplatform(Motor&, Motor&, Motor&, Motor&) &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_ab1d1ed5
</UL>

<P><STRONG><a name="[1e6]"></a>omniplatform::omniplatform__sub_object(Motor&, Motor&, Motor&, Motor&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, omniplatform.o(i._ZN12omniplatformC1ER5MotorS1_S1_S1_), UNUSED)

<P><STRONG><a name="[b5]"></a>time_service::init()</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, time_service.o(i._ZN12time_service4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = time_service::init() &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::init(unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[153]"></a>time_service::delay(unsigned)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, time_service.o(i._ZN12time_service5delayEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = time_service::delay(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::init(unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[8f]"></a>time_service::millis()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, time_service.o(i._ZN12time_service6millisEv))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kicker::setKickerStatus(bool)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button::pressed()
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goalkeeper::angleStopLeaving(float)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BallSensor::BallSensor(Dma&)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BallSensor::ballLongTimeInGrip()
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BallSensor::ballInGrip()
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::mustLeave()
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::update()
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::init(unsigned char, unsigned char, unsigned char)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::goalkeeperStrategy()
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::forwardStrategy()
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::mayKick2Ball()
</UL>

<P><STRONG><a name="[152]"></a>time_service::startTime()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, time_service.o(i._ZN12time_service9startTimeEv))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::init(unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[b6]"></a>VoltageDividor::getVoltage()</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, voltage.o(i._ZN14VoltageDividor10getVoltageEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VoltageDividor::getVoltage()
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dma::dataReturn(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::update()
</UL>

<P><STRONG><a name="[169]"></a>VoltageDividor::voltageLow(float)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, voltage.o(i._ZN14VoltageDividor10voltageLowEf))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::update()
</UL>

<P><STRONG><a name="[19b]"></a>VoltageDividor::VoltageDividor(Dma&)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, voltage.o(i._ZN14VoltageDividorC1ER3Dma))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_ab1d1ed5
</UL>

<P><STRONG><a name="[1e7]"></a>VoltageDividor::VoltageDividor__sub_object(Dma&)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, voltage.o(i._ZN14VoltageDividorC1ER3Dma), UNUSED)

<P><STRONG><a name="[a7]"></a>ProcessingCoord::ballInBack(float, unsigned char)</STRONG> (Thumb, 406 bytes, Stack size 56 bytes, processing_coord.o(i._ZN15ProcessingCoord10ballInBackEfh))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ProcessingCoord::ballInBack(float, unsigned char) &rArr; std::atan2(float, float) &rArr; __hardfp_atan2f &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessingCoord::adduct180(short)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessingCoord::adduct(short)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::atan2(float, float)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goalkeeper::getVecToIntersection(short)
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::mustLeave()
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::forwardStrategy()
</UL>

<P><STRONG><a name="[138]"></a>ProcessingCoord::checkXLeft(short, unsigned char)</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, processing_coord.o(i._ZN15ProcessingCoord10checkXLeftEsh))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::checkOUTs()
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::goalkeeperStrategy()
</UL>

<P><STRONG><a name="[13a]"></a>ProcessingCoord::checkYDown(short)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, processing_coord.o(i._ZN15ProcessingCoord10checkYDownEs))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::checkOUTs()
</UL>

<P><STRONG><a name="[139]"></a>ProcessingCoord::checkXRight(short, unsigned char)</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, processing_coord.o(i._ZN15ProcessingCoord11checkXRightEsh))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::checkOUTs()
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::goalkeeperStrategy()
</UL>

<P><STRONG><a name="[b7]"></a>ProcessingCoord::getVecToPoint(short, short)</STRONG> (Thumb, 296 bytes, Stack size 88 bytes, processing_coord.o(i._ZN15ProcessingCoord13getVecToPointEss))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ProcessingCoord::getVecToPoint(short, short) &rArr; std::pow(float, int) &rArr; __hardfp_powf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::pow(float, int)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vec2b::Vec2b(double, double)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessingCoord::adduct(short)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::atan2(float, float)
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::sqrt(float)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::goalkeeperStrategy()
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::forwardStrategy()
</UL>

<P><STRONG><a name="[b9]"></a>ProcessingCoord::getTarget2Enemy()</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, processing_coord.o(i._ZN15ProcessingCoord15getTarget2EnemyEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ProcessingCoord::getTarget2Enemy() &rArr; std::atan2(float, float) &rArr; __hardfp_atan2f &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessingCoord::adduct180(short)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::atan2(float, float)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::getVec2bToBallFollow()
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::goalkeeperStrategy()
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::forwardStrategy()
</UL>

<P><STRONG><a name="[ba]"></a>ProcessingCoord::suitableParams2Kick()</STRONG> (Thumb, 230 bytes, Stack size 40 bytes, processing_coord.o(i._ZN15ProcessingCoord19suitableParams2KickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ProcessingCoord::suitableParams2Kick() &rArr; std::atan2(float, float) &rArr; __hardfp_atan2f &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::atan2(float, float)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::goalkeeperStrategy()
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::forwardStrategy()
</UL>

<P><STRONG><a name="[9d]"></a>ProcessingCoord::adduct(short)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, processing_coord.o(i._ZN15ProcessingCoord6adductEs))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goalkeeper::getTargetRadiuses()
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::vec2bOnGoal(float, float)
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessingCoord::getVecToPoint(short, short)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessingCoord::ballInBack(float, unsigned char)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goalkeeper::getVecToIntersection(short)
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::getVec2bToBallFollow()
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::goalkeeperStrategy()
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::getVecForEnemyCircle(short, short)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::getVecForMyCircle(short, short)
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::setVec2Out(unsigned char, Vec2b)
</UL>

<P><STRONG><a name="[154]"></a>ProcessingCoord::setGoal(unsigned char)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, processing_coord.o(i._ZN15ProcessingCoord7setGoalEh))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::update()
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::init(unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[136]"></a>ProcessingCoord::checkYUp(short)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, processing_coord.o(i._ZN15ProcessingCoord8checkYUpEs))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::checkOUTs()
</UL>

<P><STRONG><a name="[bb]"></a>ProcessingCoord::distance(float, float, float, float)</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, processing_coord.o(i._ZN15ProcessingCoord8distanceEffff))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ProcessingCoord::distance(float, float, float, float) &rArr; std::pow(float, int) &rArr; __hardfp_powf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::pow(float, int)
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::sqrt(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::isEnemyGoalCircle(short, short, short, short)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::nearMyGoal()
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::goalkeeperStrategy()
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::forwardStrategy()
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::isMyGoalCircle(short, short, short, short)
</UL>

<P><STRONG><a name="[a4]"></a>ProcessingCoord::adduct180(short)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, processing_coord.o(i._ZN15ProcessingCoord9adduct180Es))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::vec2bOnGoal(float, float)
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessingCoord::getTarget2Enemy()
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessingCoord::ballInBack(float, unsigned char)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goalkeeper::getTargetGoalkeeper()
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goalkeeper::getCurrentLeaveTime(short)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::goalkeeperStrategy()
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::forwardStrategy()
</UL>

<P><STRONG><a name="[155]"></a>ProcessingCoord::setMaxLen(float)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, processing_coord.o(i._ZN15ProcessingCoord9setMaxLenEf))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::init(unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[166]"></a>ProcessingCoord::setParams(short, short, short, short, short)</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, processing_coord.o(i._ZN15ProcessingCoord9setParamsEsssss))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ProcessingCoord::setParams(short, short, short, short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::update()
</UL>

<P><STRONG><a name="[ab]"></a>ProcessingCoord::ProcessingCoord()</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, processing_coord.o(i._ZN15ProcessingCoordC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::Forward()
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goalkeeper::Goalkeeper()
</UL>

<P><STRONG><a name="[1e8]"></a>ProcessingCoord::ProcessingCoord__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, processing_coord.o(i._ZN15ProcessingCoordC1Ev), UNUSED)

<P><STRONG><a name="[bc]"></a>Adc::adcDmaInit()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, adc.o(i._ZN3Adc10adcDmaInitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Adc::adcDmaInit()
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConv
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_EOCOnEachRegularChannelCmd
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMARequestAfterLastTransferCmd
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMACmd
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dma::adcInitInDma(unsigned char)
</UL>

<P><STRONG><a name="[c1]"></a>Adc::setChannel()</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, adc.o(i._ZN3Adc10setChannelEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Adc::setChannel() &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dma::adcInitInDma(unsigned char)
</UL>

<P><STRONG><a name="[cb]"></a>Adc::getRCCPeriph(ADC_TypeDef*)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, adc.o(i._ZN3Adc12getRCCPeriphEP11ADC_TypeDef))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc::Adc(ADC_TypeDef*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[d0]"></a>Adc::getADC()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, adc.o(i._ZN3Adc6getADCEv))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dma::dmaInit(DMA_Stream_TypeDef*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[c3]"></a>Adc::adcInit(unsigned char)</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, adc.o(i._ZN3Adc7adcInitEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Adc::adcInit(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CommonInit
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc::getCycles(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dma::adcInitInDma(unsigned char)
</UL>

<P><STRONG><a name="[c7]"></a>Adc::startADC()</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, adc.o(i._ZN3Adc8startADCEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Adc::startADC() &rArr; ADC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dma::adcInitInDma(unsigned char)
</UL>

<P><STRONG><a name="[c5]"></a>Adc::getCycles(unsigned char)</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, adc.o(i._ZN3Adc9getCyclesEh))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc::adcInit(unsigned char)
</UL>

<P><STRONG><a name="[ca]"></a>Adc::Adc(ADC_TypeDef*, unsigned char, unsigned char)</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, adc.o(i._ZN3AdcC1EP11ADC_TypeDefhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Adc::Adc(ADC_TypeDef*, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc::getRCCPeriph(ADC_TypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_ab1d1ed5
</UL>

<P><STRONG><a name="[1e9]"></a>Adc::Adc__sub_object(ADC_TypeDef*, unsigned char, unsigned char)</STRONG> (Thumb, 0 bytes, Stack size 20 bytes, adc.o(i._ZN3AdcC1EP11ADC_TypeDefhh), UNUSED)

<P><STRONG><a name="[91]"></a>Dma::dataReturn(unsigned char)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dma.o(i._ZN3Dma10dataReturnEh))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kicker::setKickerStatus(bool)
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoltageDividor::getVoltage()
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BallSensor::getValue()
</UL>

<P><STRONG><a name="[cc]"></a>Dma::adcInitInDma(unsigned char)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, dma.o(i._ZN3Dma12adcInitInDmaEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Dma::adcInitInDma(unsigned char) &rArr; Adc::startADC() &rArr; ADC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc::startADC()
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc::adcInit(unsigned char)
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc::setChannel()
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc::adcDmaInit()
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dma::Dma(unsigned, Adc&, DMA_Stream_TypeDef*, unsigned, unsigned, unsigned char)
</UL>

<P><STRONG><a name="[cd]"></a>Dma::dmaInit(DMA_Stream_TypeDef*, unsigned, unsigned)</STRONG> (Thumb, 108 bytes, Stack size 80 bytes, dma.o(i._ZN3Dma7dmaInitEP18DMA_Stream_TypeDefjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Dma::dmaInit(DMA_Stream_TypeDef*, unsigned, unsigned) &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc::getADC()
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dma::Dma(unsigned, Adc&, DMA_Stream_TypeDef*, unsigned, unsigned, unsigned char)
</UL>

<P><STRONG><a name="[d3]"></a>Dma::Dma(unsigned, Adc&, DMA_Stream_TypeDef*, unsigned, unsigned, unsigned char)</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, dma.o(i._ZN3DmaC1EjR3AdcP18DMA_Stream_TypeDefjjh))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Dma::Dma(unsigned, Adc&, DMA_Stream_TypeDef*, unsigned, unsigned, unsigned char) &rArr; Dma::dmaInit(DMA_Stream_TypeDef*, unsigned, unsigned) &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dma::dmaInit(DMA_Stream_TypeDef*, unsigned, unsigned)
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dma::adcInitInDma(unsigned char)
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_ab1d1ed5
</UL>

<P><STRONG><a name="[1ea]"></a>Dma::Dma__sub_object(unsigned, Adc&, DMA_Stream_TypeDef*, unsigned, unsigned, unsigned char)</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dma.o(i._ZN3DmaC1EjR3AdcP18DMA_Stream_TypeDefjjh), UNUSED)

<P><STRONG><a name="[d4]"></a>Pin::RCC_ClockCmd()</STRONG> (Thumb, 256 bytes, Stack size 8 bytes, pin.o(i._ZN3Pin12RCC_ClockCmdEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Pin::RCC_ClockCmd()
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin::pwmInit(short, unsigned, unsigned char)
</UL>

<P><STRONG><a name="[ee]"></a>Pin::setTimParams(unsigned short)</STRONG> (Thumb, 198 bytes, Stack size 0 bytes, pin.o(i._ZN3Pin12setTimParamsEt))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin::Pin(char, unsigned char, unsigned short)
</UL>

<P><STRONG><a name="[ef]"></a>Pin::setAFforUSART(unsigned short)</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, pin.o(i._ZN3Pin13setAFforUSARTEt))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin::Pin(char, unsigned char, unsigned short)
</UL>

<P><STRONG><a name="[d6]"></a>Pin::pwm(unsigned)</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, pin.o(i._ZN3Pin3pwmEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Pin::pwm(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare4
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare3
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare2
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare1
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::disable()
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::go(short)
</UL>

<P><STRONG><a name="[db]"></a>Pin::set(bool)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, pin.o(i._ZN3Pin3setEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Pin::set(bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSOP::updateTSOPs()
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::update()
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::goalkeeperStrategy()
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::forwardStrategy()
</UL>

<P><STRONG><a name="[fb]"></a>Pin::getPin()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pin.o(i._ZN3Pin6getPinEv))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSOP::updateTSOPs()
</UL>

<P><STRONG><a name="[de]"></a>Pin::setBit()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pin.o(i._ZN3Pin6setBitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Pin::setBit()
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kicker::open()
</UL>

<P><STRONG><a name="[ec]"></a>Pin::setPin(unsigned char)</STRONG> (Thumb, 204 bytes, Stack size 0 bytes, pin.o(i._ZN3Pin6setPinEh))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin::Pin(char, unsigned char, unsigned short)
</UL>

<P><STRONG><a name="[df]"></a>Pin::pwmInit(short, unsigned, unsigned char)</STRONG> (Thumb, 292 bytes, Stack size 40 bytes, pin.o(i._ZN3Pin7pwmInitEsjh))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Pin::pwmInit(short, unsigned, unsigned char) &rArr; TIM_OC4Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4Init
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3Init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2Init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CtrlPWMOutputs
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_BDTRConfig
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin::RCC_ClockCmd()
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Motor(Pin&, unsigned char, Pin&, unsigned char)
</UL>

<P><STRONG><a name="[e8]"></a>Pin::readPin()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, pin.o(i._ZN3Pin7readPinEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Pin::readPin()
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputData
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button::pressed()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::update()
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::goalkeeperStrategy()
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::forwardStrategy()
</UL>

<P><STRONG><a name="[ed]"></a>Pin::setGPIO(char)</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, pin.o(i._ZN3Pin7setGPIOEc))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin::Pin(char, unsigned char, unsigned short)
</UL>

<P><STRONG><a name="[fa]"></a>Pin::getGPIOx()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pin.o(i._ZN3Pin8getGPIOxEv))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSOP::updateTSOPs()
</UL>

<P><STRONG><a name="[ea]"></a>Pin::resetBit()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pin.o(i._ZN3Pin8resetBitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Pin::resetBit()
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kicker::close()
</UL>

<P><STRONG><a name="[101]"></a>Pin::getPeriod()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pin.o(i._ZN3Pin9getPeriodEv))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::go(short)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::getMaxSpeed()
</UL>

<P><STRONG><a name="[eb]"></a>Pin::Pin(char, unsigned char, unsigned short)</STRONG> (Thumb, 528 bytes, Stack size 32 bytes, pin.o(i._ZN3PinC1Echt))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Pin::Pin(char, unsigned char, unsigned short) &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin::setGPIO(char)
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin::setPin(unsigned char)
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin::setAFforUSART(unsigned short)
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin::setTimParams(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_ab1d1ed5
</UL>

<P><STRONG><a name="[1eb]"></a>Pin::Pin__sub_object(char, unsigned char, unsigned short)</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, pin.o(i._ZN3PinC1Echt), UNUSED)

<P><STRONG><a name="[f2]"></a>TSOP::angleOffset(double, double, double)</STRONG> (Thumb, 390 bytes, Stack size 88 bytes, tsop.o(i._ZN4TSOP11angleOffsetEddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = TSOP::angleOffset(double, double, double) &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::abs(double)
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSOP::adduct(short)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSOP::convertDist(double)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::getVec2bToBallFollow()
</UL>

<P><STRONG><a name="[f5]"></a>TSOP::convertDist(double)</STRONG> (Thumb, 146 bytes, Stack size 48 bytes, tsop.o(i._ZN4TSOP11convertDistEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TSOP::convertDist(double) &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSOP::angleOffset(double, double, double)
</UL>

<P><STRONG><a name="[f9]"></a>TSOP::updateTSOPs()</STRONG> (Thumb, 280 bytes, Stack size 32 bytes, tsop.o(i._ZN4TSOP11updateTSOPsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TSOP::updateTSOPs() &rArr; Pin::set(bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin::set(bool)
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin::getGPIOx()
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin::getPin()
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::update()
</UL>

<P><STRONG><a name="[f6]"></a>TSOP::adduct(short)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, tsop.o(i._ZN4TSOP6adductEs))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSOP::calculate()
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSOP::angleOffset(double, double, double)
</UL>

<P><STRONG><a name="[150]"></a>TSOP::ballFar(float)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tsop.o(i._ZN4TSOP7ballFarEf))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::getVec2bToBallFollow()
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::goalkeeperStrategy()
</UL>

<P><STRONG><a name="[14c]"></a>TSOP::distBad(short)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tsop.o(i._ZN4TSOP7distBadEs))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::update()
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::goalkeeperStrategy()
</UL>

<P><STRONG><a name="[159]"></a>TSOP::getDist()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tsop.o(i._ZN4TSOP7getDistEv))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::update()
</UL>

<P><STRONG><a name="[158]"></a>TSOP::getAngle()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tsop.o(i._ZN4TSOP8getAngleEv))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::update()
</UL>

<P><STRONG><a name="[fc]"></a>TSOP::calculate()</STRONG> (Thumb, 282 bytes, Stack size 40 bytes, tsop.o(i._ZN4TSOP9calculateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TSOP::calculate() &rArr; __hardfp_atan2f &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSOP::adduct(short)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::update()
</UL>

<P><STRONG><a name="[100]"></a>TSOP::TSOP(Pin&, Pin&, Pin&, Pin&, Pin&, Pin&)</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, tsop.o(i._ZN4TSOPC1ER3PinS1_S1_S1_S1_S1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TSOP::TSOP(Pin&, Pin&, Pin&, Pin&, Pin&, Pin&) &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_ab1d1ed5
</UL>

<P><STRONG><a name="[1ec]"></a>TSOP::TSOP__sub_object(Pin&, Pin&, Pin&, Pin&, Pin&, Pin&)</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, tsop.o(i._ZN4TSOPC1ER3PinS1_S1_S1_S1_S1_), UNUSED)

<P><STRONG><a name="[ad]"></a>Motor::getMaxSpeed()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, motor.o(i._ZN5Motor11getMaxSpeedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Motor::getMaxSpeed()
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin::getPeriod()
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;omniplatform::move(float, float, float, float, float)
</UL>

<P><STRONG><a name="[b0]"></a>Motor::go(short)</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, motor.o(i._ZN5Motor2goEs))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Motor::go(short) &rArr; Pin::pwm(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin::getPeriod()
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin::pwm(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;omniplatform::move(float, float, float, float, float)
</UL>

<P><STRONG><a name="[b2]"></a>Motor::disable()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, motor.o(i._ZN5Motor7disableEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Motor::disable() &rArr; Pin::pwm(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin::pwm(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;omniplatform::disable()
</UL>

<P><STRONG><a name="[102]"></a>Motor::Motor(Pin&, unsigned char, Pin&, unsigned char)</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, motor.o(i._ZN5MotorC1ER3PinhS1_h))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Motor::Motor(Pin&, unsigned char, Pin&, unsigned char) &rArr; Pin::pwmInit(short, unsigned, unsigned char) &rArr; TIM_OC4Init
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin::pwmInit(short, unsigned, unsigned char)
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_ab1d1ed5
</UL>

<P><STRONG><a name="[1ed]"></a>Motor::Motor__sub_object(Pin&, unsigned char, Pin&, unsigned char)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, motor.o(i._ZN5MotorC1ER3PinhS1_h), UNUSED)

<P><STRONG><a name="[103]"></a>Vec2b::changeTo(Vec2b)</STRONG> (Thumb, 870 bytes, Stack size 152 bytes, vec2b.o(i._ZN5Vec2b8changeToES_))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = Vec2b::changeTo(Vec2b) &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::goalkeeperStrategy()
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::forwardStrategy()
</UL>

<P><STRONG><a name="[a0]"></a>Vec2b::Vec2b(double, double)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, vec2b.o(i._ZN5Vec2bC1Edd))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BallVec2b::getCurrentVec2b()
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::vec2bOnGoal(float, float)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vec2b::operator +(const Vec2b&)
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessingCoord::getVecToPoint(short, short)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goalkeeper::getVecToIntersection(short)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goalkeeper::getVecToGoalCenter()
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::update()
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::init(unsigned char, unsigned char, unsigned char)
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::getVec2bToBallFollow()
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::goalkeeperStrategy()
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::forwardStrategy()
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::getVecForEnemyCircle(short, short)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::getVecForMyCircle(short, short)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::projectionOnY(Vec2b)
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::setVec2Out(unsigned char, Vec2b)
</UL>

<P><STRONG><a name="[1ee]"></a>Vec2b::Vec2b__sub_object(double, double)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vec2b.o(i._ZN5Vec2bC1Edd), UNUSED)

<P><STRONG><a name="[9f]"></a>Vec2b::Vec2b()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, vec2b.o(i._ZN5Vec2bC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goalkeeper::getVecToIntersection(short)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goalkeeper::getVecToGoalCenter()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::goalkeeperStrategy()
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_ab1d1ed5
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vec2bTime::Vec2bTime()
</UL>

<P><STRONG><a name="[1ef]"></a>Vec2b::Vec2b__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vec2b.o(i._ZN5Vec2bC1Ev), UNUSED)

<P><STRONG><a name="[108]"></a>Vec2b::operator *=(const float&)</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, vec2b.o(i._ZN5Vec2bmLERKf))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Vec2b::operator *=(const float&) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::setResOUTVector(OutPair, Vec2b)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::forwardStrategy()
</UL>

<P><STRONG><a name="[109]"></a>Vec2b::operator +(const Vec2b&)</STRONG> (Thumb, 524 bytes, Stack size 88 bytes, vec2b.o(i._ZN5Vec2bplERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Vec2b::operator +(const Vec2b&) &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vec2b::Vec2b(double, double)
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::setResOUTVector(OutPair, Vec2b)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::goalkeeperStrategy()
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::forwardStrategy()
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::setVec2Out(unsigned char, Vec2b)
</UL>

<P><STRONG><a name="[10a]"></a>uart1::usart1Init(unsigned, float, unsigned char)</STRONG> (Thumb, 308 bytes, Stack size 48 bytes, usart1.o(i._ZN5uart110usart1InitEjfh))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = uart1::usart1Init(unsigned, float, unsigned char) &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_StructInit
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenMV::initUSART(unsigned char)
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_imu::initUSART(unsigned char)
</UL>

<P><STRONG><a name="[119]"></a>uart1::read()</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, usart1.o(i._ZN5uart14readEv))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_imu::read()
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_imu::setZeroAngle()
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenMV::read()
</UL>

<P><STRONG><a name="[118]"></a>uart1::available()</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, usart1.o(i._ZN5uart19availableEv))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_imu::read()
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_imu::setZeroAngle()
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenMV::read()
</UL>

<P><STRONG><a name="[10f]"></a>uart2::usart2Init(unsigned, float, unsigned char)</STRONG> (Thumb, 308 bytes, Stack size 48 bytes, usart2.o(i._ZN5uart210usart2InitEjfh))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = uart2::usart2Init(unsigned, float, unsigned char) &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_StructInit
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenMV::initUSART(unsigned char)
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_imu::initUSART(unsigned char)
</UL>

<P><STRONG><a name="[11b]"></a>uart2::read()</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, usart2.o(i._ZN5uart24readEv))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_imu::read()
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_imu::setZeroAngle()
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenMV::read()
</UL>

<P><STRONG><a name="[11a]"></a>uart2::available()</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, usart2.o(i._ZN5uart29availableEv))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_imu::read()
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_imu::setZeroAngle()
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenMV::read()
</UL>

<P><STRONG><a name="[110]"></a>uart3::usart3Init(unsigned, float, unsigned char)</STRONG> (Thumb, 308 bytes, Stack size 48 bytes, usart3.o(i._ZN5uart310usart3InitEjfh))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = uart3::usart3Init(unsigned, float, unsigned char) &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_StructInit
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenMV::initUSART(unsigned char)
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_imu::initUSART(unsigned char)
</UL>

<P><STRONG><a name="[11d]"></a>uart3::read()</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, usart3.o(i._ZN5uart34readEv))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_imu::read()
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_imu::setZeroAngle()
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenMV::read()
</UL>

<P><STRONG><a name="[11c]"></a>uart3::available()</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, usart3.o(i._ZN5uart39availableEv))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_imu::read()
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_imu::setZeroAngle()
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenMV::read()
</UL>

<P><STRONG><a name="[111]"></a>uart6::usart6Init(unsigned, float, unsigned char)</STRONG> (Thumb, 308 bytes, Stack size 48 bytes, usart6.o(i._ZN5uart610usart6InitEjfh))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = uart6::usart6Init(unsigned, float, unsigned char) &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_StructInit
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenMV::initUSART(unsigned char)
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_imu::initUSART(unsigned char)
</UL>

<P><STRONG><a name="[11f]"></a>uart6::read()</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, usart6.o(i._ZN5uart64readEv))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_imu::read()
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_imu::setZeroAngle()
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenMV::read()
</UL>

<P><STRONG><a name="[11e]"></a>uart6::available()</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, usart6.o(i._ZN5uart69availableEv))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_imu::read()
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_imu::setZeroAngle()
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenMV::read()
</UL>

<P><STRONG><a name="[112]"></a>Button::pressed()</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, button.o(i._ZN6Button7pressedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Button::pressed() &rArr; Pin::readPin()
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin::readPin()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_service::millis()
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::update()
</UL>

<P><STRONG><a name="[113]"></a>Button::Button(Pin, bool)</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, button.o(i._ZN6ButtonC1E3Pinb))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Button::Button(Pin, bool) &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_ab1d1ed5
</UL>

<P><STRONG><a name="[1f0]"></a>Button::Button__sub_object(Pin, bool)</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, button.o(i._ZN6ButtonC1E3Pinb), UNUSED)

<P><STRONG><a name="[16a]"></a>Kicker::getDMASignal()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, kicker.o(i._ZN6Kicker12getDMASignalEv))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::update()
</UL>

<P><STRONG><a name="[114]"></a>Kicker::setKickerStatus(bool)</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, kicker.o(i._ZN6Kicker15setKickerStatusEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Kicker::setKickerStatus(bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_service::millis()
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dma::dataReturn(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::goalkeeperStrategy()
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::forwardStrategy()
</UL>

<P><STRONG><a name="[115]"></a>Kicker::open()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, kicker.o(i._ZN6Kicker4openEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Kicker::open() &rArr; Pin::setBit()
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin::setBit()
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::goalkeeperStrategy()
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::forwardStrategy()
</UL>

<P><STRONG><a name="[116]"></a>Kicker::close()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, kicker.o(i._ZN6Kicker5closeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Kicker::close() &rArr; Pin::resetBit()
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin::resetBit()
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::goalkeeperStrategy()
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::forwardStrategy()
</UL>

<P><STRONG><a name="[141]"></a>Kicker::canKick()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, kicker.o(i._ZN6Kicker7canKickEv))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::goalkeeperStrategy()
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::forwardStrategy()
</UL>

<P><STRONG><a name="[19c]"></a>Kicker::Kicker(Pin&, Dma&)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, kicker.o(i._ZN6KickerC1ER3PinR3Dma))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Kicker::Kicker(Pin&, Dma&)
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_ab1d1ed5
</UL>

<P><STRONG><a name="[1f1]"></a>Kicker::Kicker__sub_object(Pin&, Dma&)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, kicker.o(i._ZN6KickerC1ER3PinR3Dma), UNUSED)

<P><STRONG><a name="[15c]"></a>OpenMV::initCoords()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, openmv.o(i._ZN6OpenMV10initCoordsEv))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::update()
</UL>

<P><STRONG><a name="[122]"></a>OpenMV::adductionMV(short)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, openmv.o(i._ZN6OpenMV11adductionMVEs))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenMV::calculate(short, bool, bool)
</UL>

<P><STRONG><a name="[162]"></a>OpenMV::getDistBlue()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, openmv.o(i._ZN6OpenMV11getDistBlueEv))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::update()
</UL>

<P><STRONG><a name="[168]"></a>OpenMV::getAngleBlue()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, openmv.o(i._ZN6OpenMV12getAngleBlueEv))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::update()
</UL>

<P><STRONG><a name="[163]"></a>OpenMV::getDistYellow()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, openmv.o(i._ZN6OpenMV13getDistYellowEv))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::update()
</UL>

<P><STRONG><a name="[167]"></a>OpenMV::getAngleYellow()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, openmv.o(i._ZN6OpenMV14getAngleYellowEv))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::update()
</UL>

<P><STRONG><a name="[120]"></a>OpenMV::crc8(volatile unsigned char*, unsigned char)</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, openmv.o(i._ZN6OpenMV4crc8EPVhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OpenMV::crc8(volatile unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenMV::read()
</UL>

<P><STRONG><a name="[164]"></a>OpenMV::getX()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, openmv.o(i._ZN6OpenMV4getXEv))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::update()
</UL>

<P><STRONG><a name="[165]"></a>OpenMV::getY()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, openmv.o(i._ZN6OpenMV4getYEv))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::update()
</UL>

<P><STRONG><a name="[117]"></a>OpenMV::read()</STRONG> (Thumb, 296 bytes, Stack size 16 bytes, openmv.o(i._ZN6OpenMV4readEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OpenMV::read() &rArr; OpenMV::crc8(volatile unsigned char*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart6::available()
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart6::read()
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3::available()
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3::read()
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2::available()
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2::read()
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1::available()
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1::read()
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenMV::crc8(volatile unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::update()
</UL>

<P><STRONG><a name="[121]"></a>OpenMV::calculate(short, bool, bool)</STRONG> (Thumb, 680 bytes, Stack size 48 bytes, openmv.o(i._ZN6OpenMV9calculateEsbb))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = OpenMV::calculate(short, bool, bool) &rArr; std::sin(float) &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::sin(float)
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::cos(float)
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenMV::adductionMV(short)
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::update()
</UL>

<P><STRONG><a name="[124]"></a>OpenMV::initUSART(unsigned char)</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, openmv.o(i._ZN6OpenMV9initUSARTEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = OpenMV::initUSART(unsigned char) &rArr; uart6::usart6Init(unsigned, float, unsigned char) &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart6::usart6Init(unsigned, float, unsigned char)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3::usart3Init(unsigned, float, unsigned char)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2::usart2Init(unsigned, float, unsigned char)
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1::usart1Init(unsigned, float, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenMV::OpenMV(Pin&, Pin&, unsigned char)
</UL>

<P><STRONG><a name="[125]"></a>OpenMV::OpenMV(Pin&, Pin&, unsigned char)</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, openmv.o(i._ZN6OpenMVC1ER3PinS1_h))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = OpenMV::OpenMV(Pin&, Pin&, unsigned char) &rArr; OpenMV::initUSART(unsigned char) &rArr; uart6::usart6Init(unsigned, float, unsigned char) &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenMV::initUSART(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_ab1d1ed5
</UL>

<P><STRONG><a name="[1f2]"></a>OpenMV::OpenMV__sub_object(Pin&, Pin&, unsigned char)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, openmv.o(i._ZN6OpenMVC1ER3PinS1_h), UNUSED)

<P><STRONG><a name="[126]"></a>Forward::myGoalLine(short, short)</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, forward.o(i._ZN7Forward10myGoalLineEss))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Forward::myGoalLine(short, short) &rArr; std::atan2(float, float) &rArr; __hardfp_atan2f &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::atan2(float, float)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::checkOUTs()
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::inMyGoal()
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::forwardStrategy()
</UL>

<P><STRONG><a name="[127]"></a>Forward::nearMyGoal()</STRONG> (Thumb, 278 bytes, Stack size 40 bytes, forward.o(i._ZN7Forward10nearMyGoalEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Forward::nearMyGoal() &rArr; ProcessingCoord::distance(float, float, float, float) &rArr; std::pow(float, int) &rArr; __hardfp_powf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessingCoord::distance(float, float, float, float)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::atan2(float, float)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::forwardStrategy()
</UL>

<P><STRONG><a name="[145]"></a>Forward::robotInOUT()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, forward.o(i._ZN7Forward10robotInOUTEv))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::forwardStrategy()
</UL>

<P><STRONG><a name="[128]"></a>Forward::setVec2Out(unsigned char, Vec2b)</STRONG> (Thumb, 500 bytes, Stack size 240 bytes, forward.o(i._ZN7Forward10setVec2OutEh5Vec2b))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = Forward::setVec2Out(unsigned char, Vec2b) &rArr; Vec2b::operator +(const Vec2b&) &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vec2b::operator +(const Vec2b&)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vec2b::Vec2b(double, double)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessingCoord::adduct(short)
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::getVecForEnemyCircle(short, short)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::getVecForMyCircle(short, short)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::projectionOnY(Vec2b)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::setResOUTVector(OutPair, Vec2b)
</UL>

<P><STRONG><a name="[130]"></a>Forward::getBallSide(float)</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, forward.o(i._ZN7Forward11getBallSideEf))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::vec2bOnGoal(float, float)
</UL>

<P><STRONG><a name="[12c]"></a>Forward::inEnemyGoal()</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, forward.o(i._ZN7Forward11inEnemyGoalEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Forward::inEnemyGoal() &rArr; Forward::isEnemyGoalCircle(short, short, short, short) &rArr; ProcessingCoord::distance(float, float, float, float) &rArr; std::pow(float, int) &rArr; __hardfp_powf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::isEnemyGoalCircle(short, short, short, short)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::enemyGoalLine(short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::forwardStrategy()
</UL>

<P><STRONG><a name="[147]"></a>Forward::resetCounts()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, forward.o(i._ZN7Forward11resetCountsEv))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::forwardStrategy()
</UL>

<P><STRONG><a name="[12f]"></a>Forward::vec2bOnGoal(float, float)</STRONG> (Thumb, 528 bytes, Stack size 72 bytes, forward.o(i._ZN7Forward11vec2bOnGoalEff))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Forward::vec2bOnGoal(float, float) &rArr; std::atan2(float, float) &rArr; __hardfp_atan2f &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vec2b::Vec2b(double, double)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessingCoord::adduct180(short)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessingCoord::adduct(short)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::atan2(float, float)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::getBallSide(float)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::forwardStrategy()
</UL>

<P><STRONG><a name="[148]"></a>Forward::robotNearOUT(unsigned char)</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, forward.o(i._ZN7Forward12robotNearOUTEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Forward::robotNearOUT(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::forwardStrategy()
</UL>

<P><STRONG><a name="[12d]"></a>Forward::enemyGoalLine(short, short)</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, forward.o(i._ZN7Forward13enemyGoalLineEss))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Forward::enemyGoalLine(short, short) &rArr; std::atan2(float, float) &rArr; __hardfp_atan2f &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::atan2(float, float)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::checkOUTs()
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::inEnemyGoal()
</UL>

<P><STRONG><a name="[129]"></a>Forward::projectionOnY(Vec2b)</STRONG> (Thumb, 224 bytes, Stack size 80 bytes, forward.o(i._ZN7Forward13projectionOnYE5Vec2b))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = Forward::projectionOnY(Vec2b) &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vec2b::Vec2b(double, double)
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::setVec2Out(unsigned char, Vec2b)
</UL>

<P><STRONG><a name="[131]"></a>Forward::isMyGoalCircle(short, short, short, short)</STRONG> (Thumb, 214 bytes, Stack size 48 bytes, forward.o(i._ZN7Forward14isMyGoalCircleEssss))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Forward::isMyGoalCircle(short, short, short, short) &rArr; ProcessingCoord::distance(float, float, float, float) &rArr; std::pow(float, int) &rArr; __hardfp_powf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessingCoord::distance(float, float, float, float)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::atan2(float, float)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::checkOUTs()
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::ballInOUT(float)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::inMyGoal()
</UL>

<P><STRONG><a name="[132]"></a>Forward::setResOUTVector(OutPair, Vec2b)</STRONG> (Thumb, 198 bytes, Stack size 104 bytes, forward.o(i._ZN7Forward15setResOUTVectorE7OutPair5Vec2b))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = Forward::setResOUTVector(OutPair, Vec2b) &rArr; Forward::setVec2Out(unsigned char, Vec2b) &rArr; Vec2b::operator +(const Vec2b&) &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vec2b::operator +(const Vec2b&)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vec2b::operator *=(const float&)
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::setVec2Out(unsigned char, Vec2b)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::forwardStrategy()
</UL>

<P><STRONG><a name="[146]"></a>Forward::robotInFreeField()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, forward.o(i._ZN7Forward16robotInFreeFieldEv))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::forwardStrategy()
</UL>

<P><STRONG><a name="[12b]"></a>Forward::getVecForMyCircle(short, short)</STRONG> (Thumb, 170 bytes, Stack size 64 bytes, forward.o(i._ZN7Forward17getVecForMyCircleEss))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Forward::getVecForMyCircle(short, short) &rArr; std::atan2(float, float) &rArr; __hardfp_atan2f &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vec2b::Vec2b(double, double)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessingCoord::adduct(short)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::atan2(float, float)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::setVec2Out(unsigned char, Vec2b)
</UL>

<P><STRONG><a name="[12e]"></a>Forward::isEnemyGoalCircle(short, short, short, short)</STRONG> (Thumb, 246 bytes, Stack size 48 bytes, forward.o(i._ZN7Forward17isEnemyGoalCircleEssss))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Forward::isEnemyGoalCircle(short, short, short, short) &rArr; ProcessingCoord::distance(float, float, float, float) &rArr; std::pow(float, int) &rArr; __hardfp_powf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessingCoord::distance(float, float, float, float)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::atan2(float, float)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::checkOUTs()
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::ballInOUT(float)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::inEnemyGoal()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12a]"></a>Forward::getVecForEnemyCircle(short, short)</STRONG> (Thumb, 290 bytes, Stack size 64 bytes, forward.o(i._ZN7Forward20getVecForEnemyCircleEss))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Forward::getVecForEnemyCircle(short, short) &rArr; std::atan2(float, float) &rArr; __hardfp_atan2f &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vec2b::Vec2b(double, double)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessingCoord::adduct(short)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::atan2(float, float)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::setVec2Out(unsigned char, Vec2b)
</UL>

<P><STRONG><a name="[133]"></a>Forward::inMyGoal()</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, forward.o(i._ZN7Forward8inMyGoalEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Forward::inMyGoal() &rArr; Forward::isMyGoalCircle(short, short, short, short) &rArr; ProcessingCoord::distance(float, float, float, float) &rArr; std::pow(float, int) &rArr; __hardfp_powf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::myGoalLine(short, short)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::isMyGoalCircle(short, short, short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::forwardStrategy()
</UL>

<P><STRONG><a name="[134]"></a>Forward::ballInOUT(float)</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, forward.o(i._ZN7Forward9ballInOUTEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Forward::ballInOUT(float) &rArr; Forward::isEnemyGoalCircle(short, short, short, short) &rArr; ProcessingCoord::distance(float, float, float, float) &rArr; std::pow(float, int) &rArr; __hardfp_powf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::isEnemyGoalCircle(short, short, short, short)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::isMyGoalCircle(short, short, short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::forwardStrategy()
</UL>

<P><STRONG><a name="[135]"></a>Forward::checkOUTs()</STRONG> (Thumb, 314 bytes, Stack size 16 bytes, forward.o(i._ZN7Forward9checkOUTsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Forward::checkOUTs() &rArr; Forward::isEnemyGoalCircle(short, short, short, short) &rArr; ProcessingCoord::distance(float, float, float, float) &rArr; std::pow(float, int) &rArr; __hardfp_powf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::isEnemyGoalCircle(short, short, short, short)
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::myGoalLine(short, short)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessingCoord::checkXRight(short, unsigned char)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessingCoord::checkXLeft(short, unsigned char)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessingCoord::checkYUp(short)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessingCoord::checkYDown(short)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPair::setOut(unsigned char)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::isMyGoalCircle(short, short, short, short)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::enemyGoalLine(short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::forwardStrategy()
</UL>

<P><STRONG><a name="[13b]"></a>Forward::Forward()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, forward.o(i._ZN7ForwardC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Forward::Forward()
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessingCoord::ProcessingCoord()
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_ab1d1ed5
</UL>

<P><STRONG><a name="[1f3]"></a>Forward::Forward__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, forward.o(i._ZN7ForwardC1Ev), UNUSED)

<P><STRONG><a name="[137]"></a>OutPair::setOut(unsigned char)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, forward.o(i._ZN7OutPair6setOutEh))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::checkOUTs()
</UL>

<P><STRONG><a name="[19a]"></a>OutPair::OutPair()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(i._ZN7OutPairC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_ab1d1ed5
</UL>

<P><STRONG><a name="[1f4]"></a>OutPair::OutPair__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, main.o(i._ZN7OutPairC1Ev), UNUSED)

<P><STRONG><a name="[144]"></a>OutPair::operator =(const OutPair&)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(i._ZN7OutPairaSERKS_))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::forwardStrategy()
</UL>

<P><STRONG><a name="[19d]"></a>Asterisk::calibrated()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i._ZN8Asterisk10calibratedEv))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13c]"></a>Asterisk::mayKick2Ball()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, main.o(i._ZN8Asterisk12mayKick2BallEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Asterisk::mayKick2Ball()
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_service::millis()
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::forwardStrategy()
</UL>

<P><STRONG><a name="[13d]"></a>Asterisk::forwardStrategy()</STRONG> (Thumb, 1864 bytes, Stack size 80 bytes, main.o(i._ZN8Asterisk15forwardStrategyEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = Asterisk::forwardStrategy() &rArr; Forward::setResOUTVector(OutPair, Vec2b) &rArr; Forward::setVec2Out(unsigned char, Vec2b) &rArr; Vec2b::operator +(const Vec2b&) &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_imu::setTarget(float)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_imu::getTarget()
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_imu::setRotationForTarget()
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_imu::getMaxRotation()
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_imu::getRotation()
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::checkOUTs()
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::ballInOUT(float)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::inMyGoal()
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::robotInFreeField()
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::setResOUTVector(OutPair, Vec2b)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::robotNearOUT(unsigned char)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::vec2bOnGoal(float, float)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::resetCounts()
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::inEnemyGoal()
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::robotInOUT()
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::nearMyGoal()
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::myGoalLine(short, short)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kicker::canKick()
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kicker::close()
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kicker::open()
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kicker::setKickerStatus(bool)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vec2b::operator +(const Vec2b&)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vec2b::operator *=(const float&)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vec2b::Vec2b(double, double)
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vec2b::changeTo(Vec2b)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin::readPin()
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin::set(bool)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessingCoord::adduct180(short)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessingCoord::distance(float, float, float, float)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessingCoord::suitableParams2Kick()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessingCoord::getTarget2Enemy()
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessingCoord::getVecToPoint(short, short)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessingCoord::ballInBack(float, unsigned char)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_service::millis()
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;omniplatform::move(float, float, float, float, float)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::atan2(float, float)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::abs(float)
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::getVec2bToBallFollow()
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::mayKick2Ball()
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPair::operator =(const OutPair&)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14a]"></a>Asterisk::goalkeeperStrategy()</STRONG> (Thumb, 2772 bytes, Stack size 120 bytes, main.o(i._ZN8Asterisk18goalkeeperStrategyEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = Asterisk::goalkeeperStrategy() &rArr; Asterisk::getVec2bToBallFollow() &rArr; TSOP::angleOffset(double, double, double) &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_imu::setTarget(float)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_imu::getTarget()
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_imu::setRotationForTarget()
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_imu::getMaxRotation()
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_imu::calculateSoft(float, float, unsigned char)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_imu::getRotation()
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kicker::canKick()
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kicker::close()
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kicker::open()
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kicker::setKickerStatus(bool)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vec2b::operator +(const Vec2b&)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vec2b::Vec2b()
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vec2b::Vec2b(double, double)
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vec2b::changeTo(Vec2b)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSOP::distBad(short)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSOP::ballFar(float)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin::readPin()
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin::set(bool)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessingCoord::adduct180(short)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessingCoord::distance(float, float, float, float)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessingCoord::adduct(short)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessingCoord::suitableParams2Kick()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessingCoord::getTarget2Enemy()
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessingCoord::getVecToPoint(short, short)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessingCoord::checkXRight(short, unsigned char)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessingCoord::checkXLeft(short, unsigned char)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_service::millis()
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;omniplatform::move(float, float, float, float, float)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goalkeeper::getVecToIntersection(short)
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goalkeeper::setAngleLeaveStatus()
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goalkeeper::getTargetGoalkeeper()
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goalkeeper::getCurrentLeaveTime(short)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goalkeeper::getVecToGoalCenter()
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goalkeeper::changeFromReturn()
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goalkeeper::angleStopLeaving(float)
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goalkeeper::dist2GoalLong()
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BallSensor::ballLongTimeInGrip()
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::atan2(float, float)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::abs(float)
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::mustLeave()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::getVec2bToBallFollow()
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[143]"></a>Asterisk::getVec2bToBallFollow()</STRONG> (Thumb, 618 bytes, Stack size 64 bytes, main.o(i._ZN8Asterisk20getVec2bToBallFollowEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = Asterisk::getVec2bToBallFollow() &rArr; TSOP::angleOffset(double, double, double) &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_imu::calculateSoft(float, float, unsigned char)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vec2b::Vec2b(double, double)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSOP::ballFar(float)
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSOP::angleOffset(double, double, double)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessingCoord::adduct(short)
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessingCoord::getTarget2Enemy()
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::abs(float)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::goalkeeperStrategy()
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::forwardStrategy()
</UL>

<P><STRONG><a name="[151]"></a>Asterisk::init(unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 360 bytes, Stack size 40 bytes, main.o(i._ZN8Asterisk4initEhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Asterisk::init(unsigned char, unsigned char, unsigned char) &rArr; time_service::init() &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vec2b::Vec2b(double, double)
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessingCoord::setMaxLen(float)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessingCoord::setGoal(unsigned char)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_service::startTime()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_service::millis()
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_service::delay(unsigned)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_service::init()
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goalkeeper::setLeaveTime(short)
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[157]"></a>Asterisk::update()</STRONG> (Thumb, 1406 bytes, Stack size 48 bytes, main.o(i._ZN8Asterisk6updateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = Asterisk::update() &rArr; BallVec2b::push(Vec2b, long long) &rArr; BallVec2b::changeValues(bool) &rArr; std::pow(double, int) &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BallVec2b::push(Vec2b, long long)
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BallVec2b::getDerivativeDist()
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BallVec2b::getDerivativeAng()
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BallVec2b::getCurrentVec2b()
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_imu::read()
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_imu::getCurrentAngle()
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_imu::setZeroAngle()
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenMV::calculate(short, bool, bool)
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenMV::read()
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenMV::getY()
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenMV::getX()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenMV::getAngleYellow()
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenMV::getDistYellow()
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenMV::getAngleBlue()
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenMV::getDistBlue()
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenMV::initCoords()
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kicker::getDMASignal()
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button::pressed()
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vec2b::Vec2b(double, double)
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSOP::calculate()
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSOP::getAngle()
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSOP::getDist()
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSOP::distBad(short)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSOP::updateTSOPs()
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin::readPin()
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin::set(bool)
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessingCoord::setParams(short, short, short, short, short)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessingCoord::setGoal(unsigned char)
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoltageDividor::voltageLow(float)
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoltageDividor::getVoltage()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_service::millis()
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;omniplatform::disable()
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BallSensor::getValue()
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BallSensor::ballInGrip()
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::abs(float)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19e]"></a>Asterisk::getRole()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i._ZN8Asterisk7getRoleEv))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14b]"></a>Asterisk::mustLeave()</STRONG> (Thumb, 302 bytes, Stack size 32 bytes, main.o(i._ZN8Asterisk9mustLeaveEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Asterisk::mustLeave() &rArr; ProcessingCoord::ballInBack(float, unsigned char) &rArr; std::atan2(float, float) &rArr; __hardfp_atan2f &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessingCoord::ballInBack(float, unsigned char)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_service::millis()
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::atan2(float, float)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::abs(double)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::goalkeeperStrategy()
</UL>

<P><STRONG><a name="[16c]"></a>gyro_imu::adduct0_360(float)</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, imu_usart.o(i._ZN8gyro_imu11adduct0_360Ef))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_imu::calculateSoft(float, float, unsigned char)
</UL>

<P><STRONG><a name="[140]"></a>gyro_imu::getRotation()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, imu_usart.o(i._ZN8gyro_imu11getRotationEv))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::goalkeeperStrategy()
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::forwardStrategy()
</UL>

<P><STRONG><a name="[15b]"></a>gyro_imu::setZeroAngle()</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, imu_usart.o(i._ZN8gyro_imu12setZeroAngleEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gyro_imu::setZeroAngle()
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart6::available()
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart6::read()
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3::available()
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3::read()
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2::available()
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2::read()
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1::available()
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1::read()
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_imu::adduct(short)
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::update()
</UL>

<P><STRONG><a name="[14f]"></a>gyro_imu::calculateSoft(float, float, unsigned char)</STRONG> (Thumb, 164 bytes, Stack size 4 bytes, imu_usart.o(i._ZN8gyro_imu13calculateSoftEffh))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = gyro_imu::calculateSoft(float, float, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_imu::adduct0_360(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::getVec2bToBallFollow()
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::goalkeeperStrategy()
</UL>

<P><STRONG><a name="[149]"></a>gyro_imu::getMaxRotation()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, imu_usart.o(i._ZN8gyro_imu14getMaxRotationEv))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::goalkeeperStrategy()
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::forwardStrategy()
</UL>

<P><STRONG><a name="[161]"></a>gyro_imu::getCurrentAngle()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, imu_usart.o(i._ZN8gyro_imu15getCurrentAngleEv))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::update()
</UL>

<P><STRONG><a name="[13f]"></a>gyro_imu::setRotationForTarget()</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, imu_usart.o(i._ZN8gyro_imu20setRotationForTargetEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gyro_imu::setRotationForTarget()
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_imu::adduct(short)
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::goalkeeperStrategy()
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::forwardStrategy()
</UL>

<P><STRONG><a name="[160]"></a>gyro_imu::read()</STRONG> (Thumb, 268 bytes, Stack size 16 bytes, imu_usart.o(i._ZN8gyro_imu4readEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gyro_imu::read()
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart6::available()
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart6::read()
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3::available()
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3::read()
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2::available()
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2::read()
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1::available()
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1::read()
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_imu::adduct(short)
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::update()
</UL>

<P><STRONG><a name="[16b]"></a>gyro_imu::adduct(short)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, imu_usart.o(i._ZN8gyro_imu6adductEs))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_imu::read()
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_imu::setRotationForTarget()
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_imu::setZeroAngle()
</UL>

<P><STRONG><a name="[142]"></a>gyro_imu::getTarget()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, imu_usart.o(i._ZN8gyro_imu9getTargetEv))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::goalkeeperStrategy()
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::forwardStrategy()
</UL>

<P><STRONG><a name="[16d]"></a>gyro_imu::initUSART(unsigned char)</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, imu_usart.o(i._ZN8gyro_imu9initUSARTEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = gyro_imu::initUSART(unsigned char) &rArr; uart6::usart6Init(unsigned, float, unsigned char) &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart6::usart6Init(unsigned, float, unsigned char)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3::usart3Init(unsigned, float, unsigned char)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2::usart2Init(unsigned, float, unsigned char)
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1::usart1Init(unsigned, float, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_imu::gyro_imu(Pin&, Pin&, unsigned char)
</UL>

<P><STRONG><a name="[13e]"></a>gyro_imu::setTarget(float)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, imu_usart.o(i._ZN8gyro_imu9setTargetEf))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::goalkeeperStrategy()
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::forwardStrategy()
</UL>

<P><STRONG><a name="[16e]"></a>gyro_imu::gyro_imu(Pin&, Pin&, unsigned char)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, imu_usart.o(i._ZN8gyro_imuC1ER3PinS1_h))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = gyro_imu::gyro_imu(Pin&, Pin&, unsigned char) &rArr; gyro_imu::initUSART(unsigned char) &rArr; uart6::usart6Init(unsigned, float, unsigned char) &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_imu::initUSART(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_ab1d1ed5
</UL>

<P><STRONG><a name="[1f5]"></a>gyro_imu::gyro_imu__sub_object(Pin&, Pin&, unsigned char)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, imu_usart.o(i._ZN8gyro_imuC1ER3PinS1_h), UNUSED)

<P><STRONG><a name="[16f]"></a>BallVec2b::changeValues(bool)</STRONG> (Thumb, 694 bytes, Stack size 80 bytes, queues_ball.o(i._ZN9BallVec2b12changeValuesEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = BallVec2b::changeValues(bool) &rArr; std::pow(double, int) &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::pow(double, int)
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vec2bTime::getAngle()
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vec2bTime::getTime()
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vec2bTime::getLen()
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BallVec2b::push(Vec2b, long long)
</UL>

<P><STRONG><a name="[15d]"></a>BallVec2b::getCurrentVec2b()</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, queues_ball.o(i._ZN9BallVec2b15getCurrentVec2bEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BallVec2b::getCurrentVec2b()
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vec2b::Vec2b(double, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::update()
</UL>

<P><STRONG><a name="[15e]"></a>BallVec2b::getDerivativeAng()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, queues_ball.o(i._ZN9BallVec2b16getDerivativeAngEv))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::update()
</UL>

<P><STRONG><a name="[15f]"></a>BallVec2b::getDerivativeDist()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, queues_ball.o(i._ZN9BallVec2b17getDerivativeDistEv))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::update()
</UL>

<P><STRONG><a name="[174]"></a>BallVec2b::setTransitionBy360()</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, queues_ball.o(i._ZN9BallVec2b18setTransitionBy360Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = BallVec2b::setTransitionBy360() &rArr; Vec2bTime::correct() &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vec2bTime::getAngle()
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vec2bTime::correct()
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BallVec2b::push(Vec2b, long long)
</UL>

<P><STRONG><a name="[15a]"></a>BallVec2b::push(Vec2b, long long)</STRONG> (Thumb, 492 bytes, Stack size 80 bytes, queues_ball.o(i._ZN9BallVec2b4pushE5Vec2bx))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = BallVec2b::push(Vec2b, long long) &rArr; BallVec2b::changeValues(bool) &rArr; std::pow(double, int) &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vec2bTime::getAngle()
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vec2bTime::getTime()
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vec2bTime::correct()
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vec2bTime::getLen()
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vec2bTime::set(double, double, unsigned, short)
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BallVec2b::calculate()
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BallVec2b::setTransitionBy360()
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BallVec2b::changeValues(bool)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::update()
</UL>

<P><STRONG><a name="[17a]"></a>BallVec2b::adduct(double)</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, queues_ball.o(i._ZN9BallVec2b6adductEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BallVec2b::adduct(double) &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BallVec2b::calculate()
</UL>

<P><STRONG><a name="[179]"></a>BallVec2b::calculate()</STRONG> (Thumb, 1314 bytes, Stack size 64 bytes, queues_ball.o(i._ZN9BallVec2b9calculateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = BallVec2b::calculate() &rArr; std::pow(double, int) &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::pow(double, int)
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vec2bTime::getAngle()
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vec2bTime::getTime()
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vec2bTime::getLen()
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BallVec2b::adduct(double)
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BallVec2b::push(Vec2b, long long)
</UL>

<P><STRONG><a name="[17c]"></a>BallVec2b::BallVec2b()</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, queues_ball.o(i._ZN9BallVec2bC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BallVec2b::BallVec2b() &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vec2bTime::set(double, double, unsigned, short)
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_ab1d1ed5
</UL>

<P><STRONG><a name="[1f6]"></a>BallVec2b::BallVec2b__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, queues_ball.o(i._ZN9BallVec2bC1Ev), UNUSED)

<P><STRONG><a name="[178]"></a>Vec2bTime::set(double, double, unsigned, short)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, queues_ball.o(i._ZN9Vec2bTime3setEddjs))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BallVec2b::BallVec2b()
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BallVec2b::push(Vec2b, long long)
</UL>

<P><STRONG><a name="[170]"></a>Vec2bTime::getLen()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, queues_ball.o(i._ZN9Vec2bTime6getLenEv))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BallVec2b::push(Vec2b, long long)
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BallVec2b::calculate()
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BallVec2b::changeValues(bool)
</UL>

<P><STRONG><a name="[175]"></a>Vec2bTime::correct()</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, queues_ball.o(i._ZN9Vec2bTime7correctEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Vec2bTime::correct() &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BallVec2b::push(Vec2b, long long)
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BallVec2b::setTransitionBy360()
</UL>

<P><STRONG><a name="[172]"></a>Vec2bTime::getTime()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, queues_ball.o(i._ZN9Vec2bTime7getTimeEv))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BallVec2b::push(Vec2b, long long)
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BallVec2b::calculate()
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BallVec2b::changeValues(bool)
</UL>

<P><STRONG><a name="[173]"></a>Vec2bTime::getAngle()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, queues_ball.o(i._ZN9Vec2bTime8getAngleEv))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BallVec2b::push(Vec2b, long long)
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BallVec2b::calculate()
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BallVec2b::setTransitionBy360()
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BallVec2b::changeValues(bool)
</UL>

<P><STRONG><a name="[69]"></a>Vec2bTime::Vec2bTime()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, queues_ball.o(i._ZN9Vec2bTimeC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Vec2bTime::Vec2bTime()
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vec2b::Vec2b()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> queues_ball.o(i._ZN9BallVec2bC1Ev)
</UL>
<P><STRONG><a name="[1f7]"></a>Vec2bTime::Vec2bTime__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, queues_ball.o(i._ZN9Vec2bTimeC1Ev), UNUSED)

<P><STRONG><a name="[f3]"></a>std::abs(double)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, main.o(i._ZSt3absd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = std::abs(double) &rArr; __hardfp_fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSOP::angleOffset(double, double, double)
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::mustLeave()
</UL>

<P><STRONG><a name="[94]"></a>std::abs(float)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(i._ZSt3absf))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goalkeeper::getVecToIntersection(short)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goalkeeper::angleStopLeaving(float)
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::update()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::getVec2bToBallFollow()
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::goalkeeperStrategy()
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::forwardStrategy()
</UL>

<P><STRONG><a name="[123]"></a>std::cos(float)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, openmv.o(i._ZSt3cosf))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = std::cos(float) &rArr; __hardfp_cosf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenMV::calculate(short, bool, bool)
</UL>

<P><STRONG><a name="[171]"></a>std::pow(double, int)</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, queues_ball.o(i._ZSt3powdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = std::pow(double, int) &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BallVec2b::calculate()
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BallVec2b::changeValues(bool)
</UL>

<P><STRONG><a name="[a8]"></a>std::pow(float, float)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, goalkeeper.o(i._ZSt3powff))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = std::pow(float, float) &rArr; __hardfp_powf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goalkeeper::getVecToIntersection(short)
</UL>

<P><STRONG><a name="[a1]"></a>std::pow(float, int)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, goalkeeper.o(i._ZSt3powfi))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = std::pow(float, int) &rArr; __hardfp_powf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessingCoord::distance(float, float, float, float)
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessingCoord::getVecToPoint(short, short)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goalkeeper::getVecToGoalCenter()
</UL>

<P><STRONG><a name="[af]"></a>std::sin(float)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, openmv.o(i._ZSt3sinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = std::sin(float) &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenMV::calculate(short, bool, bool)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;omniplatform::move(float, float, float, float, float)
</UL>

<P><STRONG><a name="[b8]"></a>std::sqrt(float)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, processing_coord.o(i._ZSt4sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = std::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessingCoord::distance(float, float, float, float)
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessingCoord::getVecToPoint(short, short)
</UL>

<P><STRONG><a name="[99]"></a>std::atan2(float, float)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, main.o(i._ZSt5atan2ff))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = std::atan2(float, float) &rArr; __hardfp_atan2f &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goalkeeper::getTargetRadiuses()
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goalkeeper::getGoalkeeperPos()
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::isEnemyGoalCircle(short, short, short, short)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::vec2bOnGoal(float, float)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::nearMyGoal()
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::myGoalLine(short, short)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessingCoord::suitableParams2Kick()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessingCoord::getTarget2Enemy()
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessingCoord::getVecToPoint(short, short)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessingCoord::ballInBack(float, unsigned char)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goalkeeper::getVecToIntersection(short)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goalkeeper::getTargetGoalkeeper()
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goalkeeper::getCurrentLeaveTime(short)
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::mustLeave()
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::goalkeeperStrategy()
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::forwardStrategy()
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::getVecForEnemyCircle(short, short)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::getVecForMyCircle(short, short)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::isMyGoalCircle(short, short, short, short)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::enemyGoalLine(short, short)
</UL>

<P><STRONG><a name="[182]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[188]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>

<P><STRONG><a name="[17d]"></a>__aeabi_vec_ctor_nocookie_nodtor</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, aeabi_vec_ctor_nocookie_nodtor.o(i.__aeabi_vec_ctor_nocookie_nodtor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BallVec2b::BallVec2b()
</UL>

<P><STRONG><a name="[180]"></a>__hardfp_atan</STRONG> (Thumb, 622 bytes, Stack size 48 bytes, atan.o(i.__hardfp_atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[107]"></a>__hardfp_atan2</STRONG> (Thumb, 448 bytes, Stack size 56 bytes, atan2.o(i.__hardfp_atan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vec2b::operator +(const Vec2b&)
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vec2b::changeTo(Vec2b)
</UL>

<P><STRONG><a name="[ff]"></a>__hardfp_atan2f</STRONG> (Thumb, 594 bytes, Stack size 32 bytes, atan2f.o(i.__hardfp_atan2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __hardfp_atan2f &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSOP::calculate()
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::atan2(float, float)
</UL>

<P><STRONG><a name="[104]"></a>__hardfp_cos</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, cos.o(i.__hardfp_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __hardfp_cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vec2b::operator +(const Vec2b&)
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vec2b::changeTo(Vec2b)
</UL>

<P><STRONG><a name="[fd]"></a>__hardfp_cosf</STRONG> (Thumb, 280 bytes, Stack size 8 bytes, cosf.o(i.__hardfp_cosf))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __hardfp_cosf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSOP::calculate()
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::cos(float)
</UL>

<P><STRONG><a name="[17e]"></a>__hardfp_fabs</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fabs.o(i.__hardfp_fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::abs(double)
</UL>

<P><STRONG><a name="[f4]"></a>__hardfp_pow</STRONG> (Thumb, 3072 bytes, Stack size 192 bytes, pow.o(i.__hardfp_pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSOP::angleOffset(double, double, double)
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::pow(double, int)
</UL>

<P><STRONG><a name="[17f]"></a>__hardfp_powf</STRONG> (Thumb, 1606 bytes, Stack size 32 bytes, powf.o(i.__hardfp_powf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __hardfp_powf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_overflow
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_divzero
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::pow(float, int)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::pow(float, float)
</UL>

<P><STRONG><a name="[1f8]"></a>__mathlib_powf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, powf.o(i.__hardfp_powf), UNUSED)

<P><STRONG><a name="[105]"></a>__hardfp_sin</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, sin.o(i.__hardfp_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vec2b::operator +(const Vec2b&)
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vec2b::changeTo(Vec2b)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::projectionOnY(Vec2b)
</UL>

<P><STRONG><a name="[fe]"></a>__hardfp_sinf</STRONG> (Thumb, 344 bytes, Stack size 16 bytes, sinf.o(i.__hardfp_sinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSOP::calculate()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::sin(float)
</UL>

<P><STRONG><a name="[106]"></a>__hardfp_sqrt</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, sqrt.o(i.__hardfp_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __hardfp_sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vec2b::operator +(const Vec2b&)
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vec2b::changeTo(Vec2b)
</UL>

<P><STRONG><a name="[a2]"></a>__hardfp_sqrtf</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sqrtf.o(i.__hardfp_sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSOP::calculate()
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goalkeeper::getVecToGoalCenter()
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::sqrt(float)
</UL>

<P><STRONG><a name="[18c]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 938 bytes, Stack size 120 bytes, rred.o(i.__ieee754_rem_pio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[18e]"></a>__kernel_cos</STRONG> (Thumb, 322 bytes, Stack size 64 bytes, cos_i.o(i.__kernel_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = __kernel_cos &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[185]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[18d]"></a>__kernel_sin</STRONG> (Thumb, 280 bytes, Stack size 72 bytes, sin_i.o(i.__kernel_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __kernel_sin &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[192]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[181]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_infnan &rArr; __aeabi_dadd
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[186]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[18b]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[193]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_overflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[183]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[197]"></a>__mathlib_flt_divzero</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_divzero))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[191]"></a>__mathlib_flt_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[18a]"></a>__mathlib_flt_infnan2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan2))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>

<P><STRONG><a name="[190]"></a>__mathlib_flt_invalid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[196]"></a>__mathlib_flt_overflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_overflow))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[189]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>

<P><STRONG><a name="[18f]"></a>__mathlib_rredf2</STRONG> (Thumb, 316 bytes, Stack size 20 bytes, rredf.o(i.__mathlib_rredf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __mathlib_rredf2
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[7d]"></a>_sys_exit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, retarget.o(i._sys_exit))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[187]"></a>atan</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, atan.o(i.atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[184]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[78]"></a>main</STRONG> (Thumb, 408 bytes, Stack size 120 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = main &rArr; Asterisk::forwardStrategy() &rArr; Forward::setResOUTVector(OutPair, Vec2b) &rArr; Forward::setVec2Out(unsigned char, Vec2b) &rArr; Vec2b::operator +(const Vec2b&) &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::isEnemyGoalCircle(short, short, short, short)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vec2b::Vec2b()
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin::readPin()
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessingCoord::adduct180(short)
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BallSensor::getValue()
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::getRole()
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::update()
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::init(unsigned char, unsigned char, unsigned char)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::goalkeeperStrategy()
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::forwardStrategy()
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::mayKick2Ball()
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::calibrated()
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[194]"></a>sqrt</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[f7]"></a>__aeabi_dneg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, basic.o(x$fpl$basic))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSOP::angleOffset(double, double, double)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[1f9]"></a>_dneg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[1fa]"></a>__aeabi_fneg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[1fb]"></a>_fneg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[1fc]"></a>_dabs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[1fd]"></a>_fabs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[8e]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessingCoord::suitableParams2Kick()
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;omniplatform::move(float, float, float, float, float)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BallSensor::ballInGrip()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::update()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::getVec2bToBallFollow()
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::goalkeeperStrategy()
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::forwardStrategy()
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::getVecForEnemyCircle(short, short)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::getVecForMyCircle(short, short)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::projectionOnY(Vec2b)
</UL>

<P><STRONG><a name="[19f]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[8d]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BallVec2b::push(Vec2b, long long)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vec2b::operator +(const Vec2b&)
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vec2b::changeTo(Vec2b)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goalkeeper::getVecToIntersection(short)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BallSensor::ballInGrip()
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSOP::convertDist(double)
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BallVec2b::adduct(double)
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BallVec2b::setTransitionBy360()
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BallVec2b::changeValues(bool)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[1a2]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
</UL>

<P><STRONG><a name="[1a5]"></a>__fpl_dcheck_NaN1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>

<P><STRONG><a name="[1a9]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[f8]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BallVec2b::push(Vec2b, long long)
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vec2b::changeTo(Vec2b)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSOP::convertDist(double)
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BallVec2b::calculate()
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[1a7]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[10c]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::setResOUTVector(OutPair, Vec2b)
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart6::usart6Init(unsigned, float, unsigned char)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3::usart3Init(unsigned, float, unsigned char)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2::usart2Init(unsigned, float, unsigned char)
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1::usart1Init(unsigned, float, unsigned char)
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vec2bTime::correct()
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BallVec2b::calculate()
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[1a8]"></a>_dcmpeq</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[9a]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goalkeeper::getTargetRadiuses()
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goalkeeper::getGoalkeeperPos()
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BallVec2b::push(Vec2b, long long)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::isEnemyGoalCircle(short, short, short, short)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::vec2bOnGoal(float, float)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::nearMyGoal()
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::myGoalLine(short, short)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vec2b::operator +(const Vec2b&)
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSOP::angleOffset(double, double, double)
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessingCoord::getTarget2Enemy()
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessingCoord::getVecToPoint(short, short)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessingCoord::ballInBack(float, unsigned char)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goalkeeper::getVecToIntersection(short)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goalkeeper::getTargetGoalkeeper()
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goalkeeper::getCurrentLeaveTime(short)
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::mustLeave()
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::goalkeeperStrategy()
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::isMyGoalCircle(short, short, short, short)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::enemyGoalLine(short, short)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[1aa]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[96]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BallVec2b::push(Vec2b, long long)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vec2b::operator +(const Vec2b&)
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessingCoord::getVecToPoint(short, short)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goalkeeper::getVecToIntersection(short)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goalkeeper::getVecToGoalCenter()
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goalkeeper::changeFromReturn()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::getVec2bToBallFollow()
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::goalkeeperStrategy()
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::pow(double, int)
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BallVec2b::changeValues(bool)
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::getVecForEnemyCircle(short, short)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::getVecForMyCircle(short, short)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::enemyGoalLine(short, short)
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::setVec2Out(unsigned char, Vec2b)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[1fe]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[176]"></a>__aeabi_l2d</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dfltll_clz.o(x$fpl$dfltll))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_l2d
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BallVec2b::push(Vec2b, long long)
</UL>

<P><STRONG><a name="[1ff]"></a>_ll_sto_d</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, dfltll_clz.o(x$fpl$dfltll), UNUSED)

<P><STRONG><a name="[199]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[200]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[17b]"></a>__aeabi_ul2d</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dfltll_clz.o(x$fpl$dfltull))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BallVec2b::calculate()
</UL>

<P><STRONG><a name="[201]"></a>_ll_uto_d</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, dfltll_clz.o(x$fpl$dfltull), UNUSED)

<P><STRONG><a name="[97]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::isEnemyGoalCircle(short, short, short, short)
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vec2b::changeTo(Vec2b)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goalkeeper::getVecToIntersection(short)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goalkeeper::getVecToGoalCenter()
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goalkeeper::changeFromReturn()
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::mustLeave()
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::goalkeeperStrategy()
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::forwardStrategy()
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSOP::convertDist(double)
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BallVec2b::adduct(double)
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BallVec2b::setTransitionBy360()
</UL>

<P><STRONG><a name="[1ab]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[1ae]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[8c]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goalkeeper::getTargetRadiuses()
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goalkeeper::getGoalkeeperPos()
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::isEnemyGoalCircle(short, short, short, short)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::vec2bOnGoal(float, float)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::nearMyGoal()
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::myGoalLine(short, short)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vec2b::operator +(const Vec2b&)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vec2b::operator *=(const float&)
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vec2b::changeTo(Vec2b)
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSOP::angleOffset(double, double, double)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessingCoord::suitableParams2Kick()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessingCoord::getTarget2Enemy()
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessingCoord::getVecToPoint(short, short)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessingCoord::ballInBack(float, unsigned char)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;omniplatform::move(float, float, float, float, float)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goalkeeper::getVecToIntersection(short)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goalkeeper::getTargetGoalkeeper()
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goalkeeper::getCurrentLeaveTime(short)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BallSensor::ballInGrip()
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::mustLeave()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::getVec2bToBallFollow()
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::goalkeeperStrategy()
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::forwardStrategy()
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BallVec2b::calculate()
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BallVec2b::changeValues(bool)
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::getVecForEnemyCircle(short, short)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::getVecForMyCircle(short, short)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::isMyGoalCircle(short, short, short, short)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::projectionOnY(Vec2b)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::enemyGoalLine(short, short)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[1ac]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1a1]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[1a4]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[a9]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vec2b::changeTo(Vec2b)
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSOP::angleOffset(double, double, double)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goalkeeper::getVecToIntersection(short)
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::getVec2bToBallFollow()
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::goalkeeperStrategy()
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::forwardStrategy()
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSOP::convertDist(double)
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BallVec2b::adduct(double)
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BallVec2b::setTransitionBy360()
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::enemyGoalLine(short, short)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[1ad]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[177]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BallVec2b::push(Vec2b, long long)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[1af]"></a>_drsb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[198]"></a>_dsqrt</STRONG> (Thumb, 404 bytes, Stack size 24 bytes, dsqrt_umaal.o(x$fpl$dsqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>

<P><STRONG><a name="[9c]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goalkeeper::getTargetRadiuses()
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BallVec2b::push(Vec2b, long long)
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vec2b::changeTo(Vec2b)
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSOP::angleOffset(double, double, double)
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessingCoord::getTarget2Enemy()
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goalkeeper::getVecToIntersection(short)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goalkeeper::getTargetGoalkeeper()
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSOP::convertDist(double)
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BallVec2b::calculate()
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BallVec2b::adduct(double)
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BallVec2b::setTransitionBy360()
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[1b1]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[8b]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goalkeeper::getTargetRadiuses()
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goalkeeper::getGoalkeeperPos()
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::isEnemyGoalCircle(short, short, short, short)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::vec2bOnGoal(float, float)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::nearMyGoal()
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::myGoalLine(short, short)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vec2b::operator *=(const float&)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessingCoord::suitableParams2Kick()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessingCoord::getTarget2Enemy()
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessingCoord::getVecToPoint(short, short)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessingCoord::ballInBack(float, unsigned char)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;omniplatform::move(float, float, float, float, float)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goalkeeper::getVecToIntersection(short)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goalkeeper::getTargetGoalkeeper()
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goalkeeper::getCurrentLeaveTime(short)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goalkeeper::getVecToGoalCenter()
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BallSensor::ballInGrip()
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::mustLeave()
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::update()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::getVec2bToBallFollow()
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::goalkeeperStrategy()
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asterisk::forwardStrategy()
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart6::usart6Init(unsigned, float, unsigned char)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3::usart3Init(unsigned, float, unsigned char)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2::usart2Init(unsigned, float, unsigned char)
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1::usart1Init(unsigned, float, unsigned char)
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::getVecForEnemyCircle(short, short)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::getVecForMyCircle(short, short)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::isMyGoalCircle(short, short, short, short)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::projectionOnY(Vec2b)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::enemyGoalLine(short, short)
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::setVec2Out(unsigned char, Vec2b)
</UL>

<P><STRONG><a name="[1b2]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[1b3]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[71]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[202]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[203]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[1a0]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[1a6]"></a>__fpl_return_NaN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>

<P><STRONG><a name="[195]"></a>__ARM_scalbn</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, scalbn.o(x$fpl$scalbn))
<BR><BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[1b4]"></a>__fpl_cmpreturn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[6a]"></a>__sti___8_main_cpp_ab1d1ed5</STRONG> (Thumb, 908 bytes, Stack size 64 bytes, main.o(i.__sti___8_main_cpp_ab1d1ed5))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = __sti___8_main_cpp_ab1d1ed5 &rArr; gyro_imu::gyro_imu(Pin&, Pin&, unsigned char) &rArr; gyro_imu::initUSART(unsigned char) &rArr; uart6::usart6Init(unsigned, float, unsigned char) &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BallVec2b::BallVec2b()
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_imu::gyro_imu(Pin&, Pin&, unsigned char)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward::Forward()
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenMV::OpenMV(Pin&, Pin&, unsigned char)
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kicker::Kicker(Pin&, Dma&)
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button::Button(Pin, bool)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vec2b::Vec2b()
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Motor(Pin&, unsigned char, Pin&, unsigned char)
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSOP::TSOP(Pin&, Pin&, Pin&, Pin&, Pin&, Pin&)
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin::Pin(char, unsigned char, unsigned short)
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dma::Dma(unsigned, Adc&, DMA_Stream_TypeDef*, unsigned, unsigned, unsigned char)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc::Adc(ADC_TypeDef*, unsigned char, unsigned char)
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoltageDividor::VoltageDividor(Dma&)
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;omniplatform::omniplatform(Motor&, Motor&, Motor&, Motor&)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goalkeeper::Goalkeeper()
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BallSensor::BallSensor(Dma&)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPair::OutPair()
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.init_array)
</UL>
<P><STRONG><a name="[85]"></a>SetSysClock</STRONG> (Thumb, 262 bytes, Stack size 8 bytes, system_stm32f4xx.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[1b0]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[1a3]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
